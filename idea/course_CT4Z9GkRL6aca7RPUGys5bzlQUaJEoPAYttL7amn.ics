BEGIN:VCALENDAR
VERSION:2.0
METHOD:PUBLISH
X-WR-CALDESC:次のコースのカレンダー イベント: FA17: CMPE-102 Sec 02 - Assembly Language Pr
 ogramming
X-WR-CALNAME:FA17: CMPE-102 Sec 02 - Assembly Language Programming のカレンダー (
 Canvas)
CALSCALE:GREGORIAN
PRODID:iCalendar-Ruby
BEGIN:VEVENT
DESCRIPTION:Ch. 2:  1\, 2\, 3\, 4\, 5 (10 points each)\n\n \n\nClarificatio
 n for #3:\n\nSignificant bit of DOUT bus is the least significant bit of th
 e output value of the last OUT instruction.  For example\, if the instructi
 on is OUT 4\, then the least significant bit of 4 is value 0\; therefore\, 
 LOC = 0 when the next instruction is executed.  Similarly\, if the instruct
 ion is OUT 5\, then LOC = 1 when the next instruction is executed.  Otherwi
 se\, if the instruction is not OUT\, the value of DOUT is the same as when 
 it was last set.\n\nAssuming each assembly instruction (code line) takes on
 e clock cycle to complete\, 10 clock cycles is the time it takes to execute
  10 lines of assembly code.
DTEND;VALUE=DATE:20170911
DTSTAMP:20170915T194700Z
DTSTART;VALUE=DATE:20170911
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch. 2 Exercises [FA17: CMPE-102 Sec 02 - Assembly Language Programm
 ing]
UID:event-assignment-4536508
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4536508
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 2:  1\, 2\, 3\, 4\, 5 (10 points each)<
 /p>\n<p> </p>\n<p><span style="text-decoration: underline\;">Clarification 
 for #3:</span></p>\n<p>Significant bit of DOUT bus is the least significant
  bit of the output value of the last OUT instruction.  For example\, if the
  instruction is OUT 4\, then the least significant bit of 4 is value 0\; th
 erefore\, LOC = 0 when the next instruction is executed.  Similarly\, if th
 e instruction is OUT 5\, then LOC = 1 when the next instruction is executed
 .  Otherwise\, if the instruction is not OUT\, the value of DOUT is the sam
 e as when it was last set.</p>\n<p>Assuming each assembly instruction (code
  line) takes one clock cycle to complete\, 10 clock cycles is the time it t
 akes to execute 10 lines of assembly code.</p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch.1:  1 - 8 (10 pts each)
DTEND;VALUE=DATE:20170911
DTSTAMP:20171001T001200Z
DTSTART;VALUE=DATE:20170911
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch.1 Exercises [FA17: CMPE-102 Sec 02 - Assembly Language Programmi
 ng]
UID:event-assignment-4534981
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4534981
X-ALT-DESC;FMTTYPE=text/html:<p>Ch.1:  1 - 8 (10 pts each)</p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch. 3:\n\n* 1\, 2\, 3\, 4\, 5
DTEND;VALUE=DATE:20170918
DTSTAMP:20171001T001500Z
DTSTART;VALUE=DATE:20170918
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch. 3 Exercises (part I) [FA17: CMPE-102 Sec 02 - Assembly Language
  Programming]
UID:event-assignment-4541054
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4541054
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 3:</p>\n<ul>\n<li>1\, 2\, 3\, 4\, 5</li
 >\n</ul>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:1.  Follow the instruction in MPLAB_Setup.txt to install MPLAB.
 \n\n2.  Once MPLAB has been successfully installed\, use the attached sampl
 e.s to test out your assembly environment.\n\nSubmit the followings to Canv
 as:\n\n* Screenshot of SFR window after program execution\n\n* Screenshot o
 f DATA memory content after program execution\n\n[](https://sjsu.instructur
 e.com/courses/1244638/files/47929356/download?wrap=1)[](https://sjsu.instru
 cture.com/courses/1244638/files/47860455/download?wrap=1)\n\n[MPLAB_Setup.t
 xt](https://sjsu.instructure.com/courses/1244638/files/47929356/download?wr
 ap=1)\n\n[sample.s](https://sjsu.instructure.com/courses/1244638/files/4786
 0455/download?wrap=1)
DTEND;VALUE=DATE:20170918
DTSTAMP:20171001T001600Z
DTSTART;VALUE=DATE:20170918
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:MPLAB Setup [FA17: CMPE-102 Sec 02 - Assembly Language Programming]
UID:event-assignment-4540368
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4540368
X-ALT-DESC;FMTTYPE=text/html:<p>1.  Follow the instruction in <strong>MPLAB
 _Setup.txt</strong> to install MPLAB.</p>\n<p>2.  Once MPLAB has been succe
 ssfully installed\, use the attached <strong>sample.s</strong> to test out 
 your assembly environment.</p>\n<p>Submit the followings to Canvas:</p>\n<u
 l>\n<li>Screenshot of SFR window after program execution</li>\n<li>Screensh
 ot of DATA memory content after program execution</li>\n</ul>\n<p><a class=
 "instructure_file_link instructure_scribd_file" title="MPLAB_Setup.txt" hre
 f="https://sjsu.instructure.com/courses/1244638/files/47929356/download?wra
 p=1" data-api-endpoint="https://sjsu.instructure.com/api/v1/courses/1244638
 /files/47929356" data-api-returntype="File"></a><a class="instructure_file_
 link instructure_scribd_file" title="sample.s" href="https://sjsu.instructu
 re.com/courses/1244638/files/47860455/download?wrap=1" data-api-endpoint="h
 ttps://sjsu.instructure.com/api/v1/courses/1244638/files/47860455" data-api
 -returntype="File"></a></p>\n<p><a class="instructure_file_link instructure
 _scribd_file" title="MPLAB_Setup-1.txt" href="https://sjsu.instructure.com/
 courses/1244638/files/47929356/download?wrap=1" data-api-endpoint="https://
 sjsu.instructure.com/api/v1/courses/1244638/files/47929356" data-api-return
 type="File">MPLAB_Setup.txt</a></p>\n<p><a class="instructure_file_link ins
 tructure_scribd_file" title="sample.s" href="https://sjsu.instructure.com/c
 ourses/1244638/files/47860455/download?wrap=1" data-api-endpoint="https://s
 jsu.instructure.com/api/v1/courses/1244638/files/47860455" data-api-returnt
 ype="File">sample.s</a></p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Given arrays A and B\, of byte values below:\n\n Matrix A:\n\nA
 ddress  \n\nValue\n\n0x1000\n\n2\n\n0x1001\n\n14\n\n0x1002\n\n26\n\n0x1003\
 n\n38\n\n \n\nMatrix B = \n\nAddress  \n\nValue\n\n0x1061\n\n1\n\n0x1062\n\
 n13\n\n0x1063\n\n25\n\n0x1064\n\n37\n\n1.  Initialize Matrix A & B at the s
 pecified memory address.\n\n2.  Initialize Matrix C (same dimension) with a
 ll zero's at location 0x1300.\n\n3.  Compute C = A + B.  (The result should
  be stored at location 0x1300).\n\nFor submission\, include the followings:
 \n\n- Screen shot of data memory showing contents of matrices A\, B\, and C
 .\n\n- Source file (.s)\n\n \n\n 
DTEND;VALUE=DATE:20170925
DTSTAMP:20171003T052100Z
DTSTART;VALUE=DATE:20170925
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Array Addition [FA17: CMPE-102 Sec 02 - Assembly Language Programmi
 ng]
UID:event-assignment-4544798
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4544798
X-ALT-DESC;FMTTYPE=text/html:<p>Given arrays A and B\, of byte values below
 :</p>\n<p> <strong>Matrix A:</strong></p>\n<table style="width: 196.703125p
 x\;">\n<tbody>\n<tr>\n<td style="width: 86px\;"><em>Address<strong>  </stro
 ng></em></td>\n<td style="width: 93.703125px\;"><i>Value</i></td>\n</tr>\n<
 tr>\n<td style="width: 86px\;"><em>0x1000</em></td>\n<td style="width: 93.7
 03125px\;">2</td>\n</tr>\n<tr>\n<td style="width: 86px\;"><em>0x1001</em></
 td>\n<td style="width: 93.703125px\;">14</td>\n</tr>\n<tr>\n<td style="widt
 h: 86px\;"><em>0x1002</em></td>\n<td style="width: 93.703125px\;">26</td>\n
 </tr>\n<tr>\n<td style="width: 86px\;"><em>0x1003</em></td>\n<td style="wid
 th: 93.703125px\;">38</td>\n</tr>\n</tbody>\n</table>\n<p><em> </em></p>\n<
 p><strong>Matrix B = </strong></p>\n<table style="width: 193.328125px\;">\n
 <tbody>\n<tr>\n<td style="width: 94px\;"><em>Address  </em></td>\n<td style
 ="width: 100.328125px\;"><i>Value</i></td>\n</tr>\n<tr>\n<td style="width: 
 94px\;"><em>0x1061</em></td>\n<td style="width: 100.328125px\;">1</td>\n</t
 r>\n<tr>\n<td style="width: 94px\;"><em>0x1062</em></td>\n<td style="width:
  100.328125px\;">13</td>\n</tr>\n<tr>\n<td style="width: 94px\;"><em>0x1063
 </em></td>\n<td style="width: 100.328125px\;">25</td>\n</tr>\n<tr>\n<td sty
 le="width: 94px\;"><em>0x1064</em></td>\n<td style="width: 100.328125px\;">
 37</td>\n</tr>\n</tbody>\n</table>\n<p>1.  Initialize Matrix A &amp\; B at 
 the specified memory address.</p>\n<p>2.  Initialize Matrix C (same dimensi
 on) with all zero's at location 0x1300.</p>\n<p>3.  Compute C = A + B.  (Th
 e result should be stored at location 0x1300).</p>\n<p>For submission\, inc
 lude the followings:</p>\n<p>- Screen shot of data memory showing contents 
 of matrices A\, B\, and C.</p>\n<p>- Source file (.s)</p>\n<p> </p>\n<p> </
 p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch. 3\n\n* 6\, 7\, 8\, 9\, 12\, 13\, 15\n\n* 16\, 18\, 20\, 22\
 , 24\, 26\, 28\, 32\n\n \n\n 
DTEND;VALUE=DATE:20170925
DTSTAMP:20171001T005400Z
DTSTART;VALUE=DATE:20170925
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch. 3 Exercises (part II) [FA17: CMPE-102 Sec 02 - Assembly Languag
 e Programming]
UID:event-assignment-4544232
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=09&year=2017#assignment_4544232
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 3</p>\n<ul>\n<li>6\, 7\, 8\, 9\, 12\, 1
 3\, 15</li>\n<li>16\, 18\, 20\, 22\, 24\, 26\, 28\, 32</li>\n</ul>\n<p> </p
 >\n<p> </p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch. 4\n\n* 1\, 3\, 5\, 7\, 9\, 11\, 13\, 15\, 17\, 19\, 21
DTEND;VALUE=DATE:20171002
DTSTAMP:20171003T060500Z
DTSTART;VALUE=DATE:20171002
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch. 4 Exercises (Part I) [FA17: CMPE-102 Sec 02 - Assembly Language
  Programming]
UID:event-assignment-4547757
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=10&year=2017#assignment_4547757
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 4</p>\n<ul>\n<li>1\, 3\, 5\, 7\, 9\, 11
 \, 13\, 15\, 17\, 19\, 21</li>\n</ul>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Given:\n\nValue1 = 0xAB90\;\n\nValue2 = 0x12CD\;\n\nWrite a sho
 rt assembly program to do the followings:\n\nResult1:  a 16-bit value conta
 ining bits 15-8 of Value1 in its MSB and bits 7-0 of Value2 in its LSB.\n\n
 Result2:  a 16-bit variable whose value is derived from Result1 by invertin
 g all the odd position bits of Result1.\n\nYou can assume Value1\, Value2\,
  Result1\, and Result2 are all variables in data memory.\n\n \n\nFor submis
 sion\, include the followings:\n\n- Screen shot of data memory showing cont
 ents of all variables.\n\n- Source file (.s)\n\n 
DTEND;VALUE=DATE:20171002
DTSTAMP:20171003T083600Z
DTSTART;VALUE=DATE:20171002
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Logical Bitwise Functions [FA17: CMPE-102 Sec 02 - Assembly Languag
 e Programming]
UID:event-assignment-4547781
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=10&year=2017#assignment_4547781
X-ALT-DESC;FMTTYPE=text/html:<p>Given:</p>\n<p style="padding-left: 30px\;"
 ><strong>Value1</strong> = 0xAB90\;</p>\n<p style="padding-left: 30px\;"><s
 trong>Value2</strong> = 0x12CD\;</p>\n<p>Write a short assembly program to 
 do the followings:</p>\n<p style="padding-left: 30px\;"><strong>Result1</st
 rong>:  a 16-bit value containing bits 15-8 of <strong>Value1</strong> in i
 ts MSB and bits 7-0 of <strong>Value2</strong> in its LSB.</p>\n<p style="p
 adding-left: 30px\;"><strong>Result2</strong>:  a 16-bit variable whose val
 ue is derived from <strong>Result1</strong> by inverting all the odd positi
 on bits of <strong>Result1</strong>.</p>\n<p>You can assume <strong>Value1<
 /strong>\, <strong>Value2</strong>\, <strong>Result1</strong>\, and <strong
 >Result2</strong> are all variables in data memory.</p>\n<p> </p>\n<p>For s
 ubmission\, include the followings:</p>\n<p>- Screen shot of data memory sh
 owing contents of all variables.</p>\n<p>- Source file (.s)</p>\n<p> </p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch. 4\, exercise #47 on page 132\n\n* Convert the given C code 
 segment to PIC24 assembly.  Assume u8_i has starting value of 0xE2.\n\nShow
  memory dump of u8_i\, u8_j\, and u8_k after execution is completed.
DTEND;VALUE=DATE:20171009
DTSTAMP:20171004T060000Z
DTSTART;VALUE=DATE:20171009
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Bit Counter [FA17: CMPE-102 Sec 02 - Assembly Language Programming]
UID:event-assignment-4550853
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=10&year=2017#assignment_4550853
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 4\, exercise #47 on page 132</p>\n<ul>\
 n<li>Convert the given C code segment to PIC24 assembly.  Assume <strong>u8
 _i</strong> has starting value of <strong>0xE2</strong>.</li>\n</ul>\n<p>Sh
 ow memory dump of <strong>u8_i</strong>\, <strong>u8_j</strong>\, and <stro
 ng>u8_k</strong> after execution is completed.</p>
END:VEVENT
BEGIN:VEVENT
DESCRIPTION:Ch. 4 Exercises:\n\n* Even exercises from 2 - 34.  (HINT:  use 
 MPLAB simulator to validate your answer.)
DTEND;VALUE=DATE:20171009
DTSTAMP:20171005T001900Z
DTSTART;VALUE=DATE:20171009
CLASS:PUBLIC
SEQUENCE:0
SUMMARY:Ch. 4 Exercises (Part II) [FA17: CMPE-102 Sec 02 - Assembly Languag
 e Programming]
UID:event-assignment-4550850
URL:http://sjsu.instructure.com/calendar?include_contexts=course_1244638&mo
 nth=10&year=2017#assignment_4550850
X-ALT-DESC;FMTTYPE=text/html:<p>Ch. 4 Exercises:</p>\n<ul>\n<li>Even exerci
 ses from 2 - 34.  (HINT:  use MPLAB simulator to validate your answer.)</li
 >\n</ul>
END:VEVENT
END:VCALENDAR
